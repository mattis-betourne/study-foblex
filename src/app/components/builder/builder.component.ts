import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { 
  FExternalItemDirective, 
  FExternalItemPlaceholderDirective, 
  FExternalItemPreviewDirective 
} from '@foblex/flow';

/**
 * Interface repr√©sentant une cat√©gorie dans le Builder
 */
interface BuilderCategory {
  /** Nom de la cat√©gorie */
  name: string;
  /** √âtat d'expansion de la cat√©gorie */
  expanded: boolean;
  /** Items contenus dans la cat√©gorie */
  items: BuilderItem[];
}

/**
 * Interface repr√©sentant un item dans une cat√©gorie du Builder
 */
interface BuilderItem {
  /** Type de l'item (Client, Task, etc.) */
  type: string;
  /** Ic√¥ne Unicode utilis√©e pour l'item */
  icon: string;
  /** Classe de couleur CSS pour l'item */
  color: string;
}

/**
 * Composant pour la barre lat√©rale de construction de flow
 */
@Component({
  selector: 'app-builder',
  standalone: true,
  imports: [
    CommonModule,
    FExternalItemDirective,
    FExternalItemPlaceholderDirective,
    FExternalItemPreviewDirective
  ],
  templateUrl: './builder.component.html',
  styleUrls: ['./builder.component.css']
})
export class BuilderComponent implements OnInit {
  /** √âtat d'ouverture de la sidebar */
  @Input() isOpen = true;
  /** √âv√©nement √©mis lors du changement d'√©tat de la sidebar */
  @Output() toggleSidebar = new EventEmitter<boolean>();
  /** √âv√©nement √©mis lors du d√©but du drag d'un item */
  @Output() itemDragStart = new EventEmitter<string>();
  /** √âv√©nement √©mis lors de la fin du drag d'un item */
  @Output() itemDragEnd = new EventEmitter<void>();
  
  /** Cat√©gories d'items disponibles dans le Builder */
  categories: BuilderCategory[] = [
    {
      name: 'Contacts',
      expanded: true,
      items: [
        { type: 'Client', icon: 'üë§', color: 'bg-blue-500' },
        { type: 'Contact', icon: 'üìû', color: 'bg-green-500' }
      ]
    },
    {
      name: 'Ventes',
      expanded: false,
      items: [
        { type: 'Deal', icon: 'üí∞', color: 'bg-yellow-500' }
      ]
    },
    {
      name: 'T√¢ches',
      expanded: false,
      items: [
        { type: 'Task', icon: '‚úÖ', color: 'bg-red-500' },
        { type: 'Email', icon: '‚úâÔ∏è', color: 'bg-purple-500' }
      ]
    },
    {
      name: 'Flux',
      expanded: true,
      items: [
        { type: 'BinarySplit', icon: 'üîÄ', color: 'bg-indigo-600' },
        { type: 'MultiSplit', icon: 'üî±', color: 'bg-teal-600' }
      ]
    }
  ];
  
  /**
   * Initialisation du composant
   */
  ngOnInit(): void {
    // S'assurer que le Builder est ouvert par d√©faut
    if (!this.isOpen) {
      this.isOpen = true;
      this.toggleSidebar.emit(this.isOpen);
    }
  }
  
  /**
   * Bascule l'√©tat d'expansion d'une cat√©gorie
   * @param category La cat√©gorie √† basculer
   */
  toggleCategory(category: BuilderCategory): void {
    category.expanded = !category.expanded;
  }
  
  /**
   * Bascule l'√©tat d'ouverture de la sidebar
   */
  toggle(): void {
    this.isOpen = !this.isOpen;
    this.toggleSidebar.emit(this.isOpen);
  }
  
  /**
   * M√©thode appel√©e au d√©but du drag d'un item
   * @param itemType Le type d'item en cours de drag
   */
  onDragStart(itemType: string): void {
    console.log('Builder: drag started with item', itemType);
    this.itemDragStart.emit(itemType);
  }
  
  /**
   * M√©thode appel√©e √† la fin du drag d'un item
   */
  onDragEnd(): void {
    console.log('Builder: drag ended');
    this.itemDragEnd.emit();
  }
} 