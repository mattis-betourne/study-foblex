import { computed, Injectable, signal } from '@angular/core';
import { generateGuid } from '@foblex/utils';
import { Connection, CrmNode } from '../models/crm.models';

export interface BuilderCategory {
  name: string;
  expanded: boolean;
  items: BuilderItem[];
}

export interface BuilderItem {
  type: string;
  icon: string;
  color: string;
}

export interface BuilderState {
  isOpen: boolean;
  categories: BuilderCategory[];
}

/**
 * Interface repr√©sentant l'√©tat du flow
 */
export interface FlowState {
  nodes: CrmNode[];
  connections: Connection[];
  zoom: {
    level: number;
    position?: { x: number, y: number };
  };
  temporaryElements: {
    nodes: CrmNode[];
    connections: Connection[];
    draggingItemType: string | null;
    isCreatingNode: boolean;
  };
  selectedNodes: string[];
  builder: BuilderState;
}

/**
 * Service central de gestion de l'√©tat du flow
 * Respecte le principe de responsabilit√© unique (SRP)
 * Source unique de v√©rit√© pour l'√©tat des nodes et connections
 */
@Injectable({
  providedIn: 'root'
})
export class FlowStateService {
  /**
   * √âtat complet du flow
   * @private
   */
  private readonly _state = signal<FlowState>({
    nodes: [],
    connections: [],
    zoom: {
      level: 1
    },
    temporaryElements: {
      nodes: [],
      connections: [],
      draggingItemType: null,
      isCreatingNode: false
    },
    selectedNodes: [],
    builder: {
      isOpen: true,
      categories: [
        {
          name: 'Execution',
          expanded: true,
          items: [
            { type: 'BinarySplit', icon: 'üîÄ', color: 'bg-indigo-600' },
            { type: 'MultiSplit', icon: 'üî±', color: 'bg-teal-600' },
            { type: 'Exit', icon: 'üîö', color: 'bg-red-200' }  // Ajout du type Exit
          ]
        },
        {
          name: 'Communication',
          expanded: true,
          items: [
            { type: 'Full Screen', icon: 'üì±', color: 'bg-blue-500' },
            { type: 'SMS', icon: 'üí¨', color: 'bg-green-500' },
            { type: 'Push', icon: 'üîî', color: 'bg-purple-500' },
            { type: 'Email', icon: '‚úâÔ∏è', color: 'bg-orange-500' }
          ]
        },
        {
          name: 'Rewards',
          expanded: true,
          items: [
            { type: 'Freebet', icon: 'üéÅ', color: 'bg-red-500' }
          ]
        }
      ]
    }
  });

  /**
   * √âtat expos√© en lecture seule
   */
  readonly state = computed(() => this._state());

  /**
   * Nodes du flow en lecture seule
   */
  readonly nodes = computed(() => this._state().nodes);

  /**
   * Connections du flow en lecture seule
   */
  readonly connections = computed(() => this._state().connections);

  /**
   * √âtat du zoom en lecture seule
   */
  readonly zoom = computed(() => this._state().zoom);

  /**
   * Niveau de zoom en lecture seule
   */
  readonly zoomLevel = computed(() => this._state().zoom.level);

  /**
   * N≈ìuds temporaires en lecture seule
   */
  readonly temporaryNodes = computed(() => this._state().temporaryElements.nodes);

  /**
   * Connexions temporaires en lecture seule
   */
  readonly temporaryConnections = computed(() => this._state().temporaryElements.connections);

  /**
   * Type d'√©l√©ment en cours de glisser-d√©poser en lecture seule
   */
  readonly draggingItemType = computed(() => this._state().temporaryElements.draggingItemType);

  /**
   * Indique si un n≈ìud est en cours de cr√©ation en lecture seule
   */
  readonly isCreatingNode = computed(() => this._state().temporaryElements.isCreatingNode);

  /**
   * N≈ìuds s√©lectionn√©s en lecture seule
   */
  readonly selectedNodes = computed(() => this._state().selectedNodes);

  /**
   * Indique si exactement un n≈ìud est s√©lectionn√©
   */
  readonly hasExactlyOneNodeSelected = computed(() => this._state().selectedNodes.length === 1);
  
  /**
   * Renvoie l'ID du n≈ìud s√©lectionn√© s'il y en a exactement un, sinon null
   */
  readonly getSelectedNodeId = computed(() => 
    this.hasExactlyOneNodeSelected() ? this._state().selectedNodes[0] : null
  );

  /**
   * Indique si le n≈ìud s√©lectionn√© peut √™tre supprim√©
   */
  readonly canDeleteSelectedNode = computed(() => {
    const selectedNodeId = this.getSelectedNodeId();
    if (!selectedNodeId) return false;
    return this.canDeleteNode(selectedNodeId);
  });

  /**
   * Met √† jour l'√©tat complet du flow
   * @param state Nouvel √©tat du flow
   */
  updateState(state: FlowState): void {
    this._state.set({
      nodes: structuredClone(state.nodes),
      connections: structuredClone(state.connections),
      zoom: structuredClone(state.zoom),
      temporaryElements: structuredClone(state.temporaryElements),
      selectedNodes: state.selectedNodes,
      builder: state.builder
    });
  }

  /**
   * Met √† jour uniquement les nodes
   * @param nodes Nouveaux nodes
   */
  updateNodes(nodes: CrmNode[]): void {
    this._state.update(state => ({
      ...state,
      nodes: structuredClone(nodes)
    }));
  }

  /**
   * Ajoute un n≈ìud au flow
   * @param node Le n≈ìud √† ajouter
   * @returns Le n≈ìud ajout√©
   */
  addNode(node: CrmNode): CrmNode {
    const nodeClone = structuredClone(node);
    
    // G√©n√©rer un ID s'il n'existe pas
    if (!nodeClone.id) {
      nodeClone.id = generateGuid();
    }
    
    // S'assurer que les valeurs par d√©faut sont d√©finies
    if (nodeClone.maxInputs === undefined) {
      nodeClone.maxInputs = this.getDefaultMaxInputs(nodeClone.type);
    }
    
    if (nodeClone.maxOutputs === undefined) {
      nodeClone.maxOutputs = this.getDefaultMaxOutputs(nodeClone.type);
    }
    
    this._state.update(state => ({
      ...state,
      nodes: [...state.nodes, nodeClone]
    }));
    
    console.log(`Added node ${nodeClone.id} of type ${nodeClone.type} to state`);
    return nodeClone;
  }

  /**
   * Supprime un n≈ìud du flow
   * @param nodeId L'ID du n≈ìud √† supprimer
   * @returns true si le n≈ìud a √©t√© trouv√© et supprim√©, false sinon
   */
  removeNode(nodeId: string): boolean {
    const initialNodeCount = this._state().nodes.length;
    
    // Supprimer √©galement toutes les connexions associ√©es
    const connectionsToRemove = [
      ...this.getConnectionsFrom(`output_${nodeId}`),
      ...this.getConnectionsTo(`input_${nodeId}`)
    ];
    
    for (const connection of connectionsToRemove) {
      this.removeConnection(connection.id);
    }
    
    // Supprimer le n≈ìud
    this._state.update(state => ({
      ...state,
      nodes: state.nodes.filter(n => n.id !== nodeId)
    }));
    
    const nodeRemoved = initialNodeCount > this._state().nodes.length;
    console.log(`Removed node ${nodeId} from state: ${nodeRemoved}`);
    return nodeRemoved;
  }

  /**
   * Met √† jour uniquement les connections
   * @param connections Nouvelles connections
   */
  updateConnections(connections: Connection[]): void {
    this._state.update(state => ({
      ...state,
      connections: structuredClone(connections)
    }));
  }

  /**
   * Ajoute une connexion au flow
   * @param connection La connexion √† ajouter
   * @returns La connexion ajout√©e
   */
  addConnection(connection: Connection): Connection {
    const connectionClone = structuredClone(connection);
    
    // G√©n√©rer un ID s'il n'existe pas
    if (!connectionClone.id) {
      connectionClone.id = generateGuid();
    }
    
    this._state.update(state => ({
      ...state,
      connections: [...state.connections, connectionClone]
    }));
    
    console.log(`Added connection ${connectionClone.id} from ${connectionClone.sourceId} to ${connectionClone.targetId}`);
    return connectionClone;
  }

  /**
   * Supprime une connexion du flow
   * @param connectionId L'ID de la connexion √† supprimer
   * @returns true si la connexion a √©t√© trouv√©e et supprim√©e, false sinon
   */
  removeConnection(connectionId: string): boolean {
    const initialConnectionCount = this._state().connections.length;
    
    this._state.update(state => ({
      ...state,
      connections: state.connections.filter(c => c.id !== connectionId)
    }));
    
    const connectionRemoved = initialConnectionCount > this._state().connections.length;
    console.log(`Removed connection ${connectionId} from state: ${connectionRemoved}`);
    return connectionRemoved;
  }

  /**
   * Met √† jour le niveau de zoom
   * @param level Nouveau niveau de zoom
   * @param position Position du point de zoom (optionnel)
   */
  updateZoom(level: number, position?: { x: number, y: number }): void {
    this._state.update(state => ({
      ...state,
      zoom: {
        level,
        position: position ? structuredClone(position) : undefined
      }
    }));
  }

  /**
   * Met √† jour les n≈ìuds temporaires
   * @param nodes Nouveaux n≈ìuds temporaires
   */
  updateTemporaryNodes(nodes: CrmNode[]): void {
    this._state.update(state => ({
      ...state,
      temporaryElements: {
        ...state.temporaryElements,
        nodes: structuredClone(nodes)
      }
    }));
  }

  /**
   * Met √† jour les connexions temporaires
   * @param connections Nouvelles connexions temporaires
   */
  updateTemporaryConnections(connections: Connection[]): void {
    this._state.update(state => ({
      ...state,
      temporaryElements: {
        ...state.temporaryElements,
        connections: structuredClone(connections)
      }
    }));
  }

  /**
   * Met √† jour le type d'√©l√©ment en cours de glisser-d√©poser
   * @param type Nouveau type
   */
  updateDraggingItemType(type: string | null): void {
    this._state.update(state => ({
      ...state,
      temporaryElements: {
        ...state.temporaryElements,
        draggingItemType: type
      }
    }));
  }

  /**
   * Met √† jour l'√©tat de cr√©ation de n≈ìud
   * @param isCreating Nouvel √©tat
   */
  updateIsCreatingNode(isCreating: boolean): void {
    this._state.update(state => ({
      ...state,
      temporaryElements: {
        ...state.temporaryElements,
        isCreatingNode: isCreating
      }
    }));
  }

  /**
   * Met √† jour les n≈ìuds s√©lectionn√©s
   * @param nodeIds IDs des n≈ìuds s√©lectionn√©s
   */
  updateSelectedNodes(nodeIds: string[]): void {
    this._state.update(state => ({
      ...state,
      selectedNodes: nodeIds
    }));
  }

  /**
   * Nettoie tous les √©l√©ments temporaires
   */
  clearTemporaryElements(): void {
    this._state.update(state => ({
      ...state,
      temporaryElements: {
        ...state.temporaryElements,
        nodes: [],
        connections: []
      }
    }));
  }

  /**
   * V√©rifie si une position est libre (pas de n≈ìuds √† proximit√©)
   * @param position Position √† v√©rifier
   * @returns true si la position est libre
   */
  isPositionFree(position: {x: number, y: number}): boolean {
    // Consid√©rer une marge de 50px autour des n≈ìuds existants
    const margin = 50;
    return !this.nodes().some(node => 
      Math.abs(node.position.x - position.x) < margin && 
      Math.abs(node.position.y - position.y) < margin
    );
  }

  /**
   * Obtient le nombre maximum d'entr√©es par d√©faut pour un type de n≈ìud
   * @param type Type de n≈ìud
   * @returns Nombre maximum d'entr√©es
   */
  getDefaultMaxInputs(type: string): number {
    switch (type) {
      // Targeting
      case 'Audience':
        return 0;  // Une audience n'a pas d'entr√©e

      // Execution
      case 'BinarySplit':
        return 1;  // Un s√©parateur binaire a exactement 1 entr√©e
      case 'MultiSplit':
        return 1;  // Un s√©parateur multiple a exactement 1 entr√©e
      case 'Exit':
        return 1;  // Un n≈ìud Exit a exactement 1 entr√©e
      
      // Communication
      case 'Full Screen':
        return 1;  // Une notification full screen a 1 entr√©e
      case 'SMS':
        return 1;  // Un SMS a 1 entr√©e
      case 'Push':
        return 1;  // Une notification push a 1 entr√©e
      case 'Email':
        return 1;  // Un email a 1 entr√©e
      
      // Rewards
      case 'Freebet':
        return 1;  // Un freebet a 1 entr√©e
      
      // Fallback
      default:
        return 1;  // Par d√©faut, 1 entr√©e
    }
  }

  /**
   * Obtient le nombre maximum de sorties par d√©faut pour un type de n≈ìud
   * @param type Type de n≈ìud
   * @returns Nombre maximum de sorties
   */
  getDefaultMaxOutputs(type: string): number {
    switch (type) {
      // Targeting
      case 'Audience':
        return 1;  // Une audience a 1 sortie maximum
      
      // Execution
      case 'BinarySplit':
        return 2;  // Un s√©parateur binaire a exactement 2 sorties
      case 'MultiSplit':
        return 3;  // Un s√©parateur multiple a jusqu'√† 5 sorties
      case 'Exit':
        return 0;  // Un n≈ìud Exit n'a aucune sortie
      
      // Communication
      case 'Full Screen':
        return 1;  // Une notification full screen a 1 sortie
      case 'SMS':
        return 1;  // Un SMS a 1 sortie
      case 'Push':
        return 1;  // Une notification push a 1 sortie
      case 'Email':
        return 1;  // Un email a 1 sortie
      
      // Rewards
      case 'Freebet':
        return 1;  // Un freebet a 1 sortie
      
      // Fallback
      default:
        return 1;  // Par d√©faut, 1 sortie
    }
  }

  /**
   * Obtient les connexions sortantes d'un n≈ìud
   * @param nodeId Identifiant du n≈ìud (avec pr√©fixe output_)
   * @returns Connexions sortantes
   */
  getConnectionsFrom(nodeId: string): Connection[] {
    return this.connections().filter(conn => conn.sourceId === nodeId);
  }

  /**
   * Obtient les connexions entrantes d'un n≈ìud
   * @param nodeId Identifiant du n≈ìud (avec pr√©fixe input_)
   * @returns Connexions entrantes
   */
  getConnectionsTo(nodeId: string): Connection[] {
    return this.connections().filter(conn => conn.targetId === nodeId);
  }

  /**
   * Cr√©e et ajoute un n≈ìud temporaire
   * @param nodeData Les donn√©es du n≈ìud temporaire
   * @returns Le n≈ìud temporaire cr√©√©
   */
  createTemporaryNode(nodeData: Partial<CrmNode>): CrmNode {
    const tempNode: CrmNode = {
      id: nodeData.id || generateGuid(),
      type: nodeData.type || 'Unknown',
      text: nodeData.text || `${nodeData.type || 'Node'} (Temporary)`,
      position: nodeData.position || { x: 0, y: 0 },
      maxInputs: nodeData.maxInputs !== undefined 
        ? nodeData.maxInputs 
        : this.getDefaultMaxInputs(nodeData.type || 'Unknown'),
      maxOutputs: nodeData.maxOutputs !== undefined 
        ? nodeData.maxOutputs 
        : this.getDefaultMaxOutputs(nodeData.type || 'Unknown')
    };
    
    // Ajouter le n≈ìud temporaire √† l'√©tat
    this._state.update(state => ({
      ...state,
      temporaryElements: {
        ...state.temporaryElements,
        nodes: [...state.temporaryElements.nodes, tempNode]
      }
    }));
    
    console.log(`Created temporary node ${tempNode.id} of type ${tempNode.type}`);
    return tempNode;
  }

  /**
   * Cr√©e et ajoute une connexion temporaire
   * @param connectionData Les donn√©es de la connexion temporaire
   * @returns La connexion temporaire cr√©√©e
   */
  createTemporaryConnection(connectionData: Partial<Connection>): Connection {
    const tempConnection: Connection = {
      id: connectionData.id || generateGuid(),
      sourceId: connectionData.sourceId || '',
      targetId: connectionData.targetId || ''
    };
    
    // Ajouter la connexion temporaire √† l'√©tat
    this._state.update(state => ({
      ...state,
      temporaryElements: {
        ...state.temporaryElements,
        connections: [...state.temporaryElements.connections, tempConnection]
      }
    }));
    
    console.log(`Created temporary connection ${tempConnection.id} from ${tempConnection.sourceId} to ${tempConnection.targetId}`);
    return tempConnection;
  }

  /**
   * Convertit un n≈ìud temporaire en n≈ìud permanent
   * @param temporaryNodeId L'ID du n≈ìud temporaire √† convertir
   * @returns Le nouveau n≈ìud permanent ou null si le n≈ìud temporaire n'a pas √©t√© trouv√©
   */
  convertTemporaryNodeToPermanent(temporaryNodeId: string): CrmNode | null {
    // Trouver le n≈ìud temporaire
    const tempNode = this._state().temporaryElements.nodes.find(n => n.id === temporaryNodeId);
    if (!tempNode) {
      console.warn(`Temporary node with id ${temporaryNodeId} not found for conversion`);
      return null;
    }
    
    // Cr√©er un nouveau n≈ìud permanent √† partir du n≈ìud temporaire
    const newNode: CrmNode = {
      id: generateGuid(),
      type: tempNode.type,
      text: tempNode.text.replace(' (Temporary)', '').replace(' (Drop here)', ''),
      position: { ...tempNode.position },
      maxInputs: tempNode.maxInputs,
      maxOutputs: tempNode.maxOutputs
    };
    
    // Ajouter le nouveau n≈ìud permanent
    this.addNode(newNode);
    
    // Trouver les connexions temporaires associ√©es
    const relatedTempConnections = this._state().temporaryElements.connections.filter(
      conn => conn.sourceId.includes(temporaryNodeId) || conn.targetId.includes(temporaryNodeId)
    );
    
    // Cr√©er des connexions permanentes en remplacement
    for (const tempConn of relatedTempConnections) {
      const isSource = tempConn.sourceId.includes(temporaryNodeId);
      
      // Cr√©er une nouvelle connexion permanente
      const newConnection: Connection = {
        id: generateGuid(),
        sourceId: isSource ? `output_${newNode.id}` : tempConn.sourceId,
        targetId: !isSource ? `input_${newNode.id}` : tempConn.targetId
      };
      
      // Ajouter la nouvelle connexion permanente
      this.addConnection(newConnection);
    }
    
    // Nettoyer tous les √©l√©ments temporaires
    this.clearTemporaryElements();
    
    console.log(`Converted temporary node ${temporaryNodeId} to permanent node ${newNode.id}`);
    return newNode;
  }

  /**
   * Recalcule les positions de toutes les nodes apr√®s une insertion
   * @param insertAfterNodeId ID de la node apr√®s laquelle ins√©rer
   * @param newNode La nouvelle node √† ins√©rer
   */
  recalculateNodesPositions(insertAfterNodeId: string, newNode: CrmNode): void {
    console.log(`Recalculating node positions after inserting node after ${insertAfterNodeId}`);
    
    // Ajouter d'abord le nouveau n≈ìud √† la liste
    const currentNodes = [...this.nodes(), newNode];
    
    // Identifier les branches et recalculer les positions comme dans recalculateAllNodesPositions
    const HORIZONTAL_SPACING = 250;
    const yThreshold = 50;
    const branches: { [key: string]: CrmNode[] } = {};
    
    // Regrouper les n≈ìuds par branches
    currentNodes.forEach(node => {
      const branchKey = Object.keys(branches).find(key => {
        const branchY = parseInt(key);
        return Math.abs(node.position.y - branchY) < yThreshold;
      });
      
      if (branchKey) {
        branches[branchKey].push(node);
      } else {
        branches[node.position.y.toString()] = [node];
      }
    });
    
    // Optimiser l'espacement vertical entre branches
    const optimizedBranches = this.optimizeBranchSpacing(branches);
    
    // Pour chaque branche, trier les n≈ìuds horizontalement et recalculer les positions X
    const updatedNodes: CrmNode[] = [];
    
    Object.entries(optimizedBranches).forEach(([yKey, branchNodes]) => {
      const y = parseFloat(yKey);
      
      // Trier les n≈ìuds de cette branche par position X
      const sortedBranchNodes = [...branchNodes].sort((a, b) => a.position.x - b.position.x);
      
      // Recalculer les positions X tout en maintenant Y
      sortedBranchNodes.forEach((node, index) => {
        updatedNodes.push({
          ...node,
          position: {
            x: index * HORIZONTAL_SPACING,
            y: y
          }
        });
      });
    });
    
    // Mettre √† jour les n≈ìuds
    this.updateNodes(updatedNodes);
    
    console.log('Node positions recalculated with spacing:', HORIZONTAL_SPACING);
  }

  /**
   * Obtient la node li√©e √† une connexion
   */
  getNodeFromConnectionId(connectionId: string, isSource: boolean = true): CrmNode | undefined {
    const connection = this.connections().find(c => c.id === connectionId);
    if (!connection) return undefined;
    
    const nodeId = (isSource ? connection.sourceId : connection.targetId).replace(/^(input_|output_)/, '');
    return this.nodes().find(n => n.id === nodeId);
  }

  /**
   * √âtat du builder en lecture seule
   */
  readonly builderState = computed(() => this._state().builder);

  /**
   * Cat√©gories du builder en lecture seule
   */
  readonly builderCategories = computed(() => this._state().builder.categories);

  /**
   * Indique si le builder est ouvert en lecture seule
   */
  readonly isBuilderOpen = computed(() => this._state().builder.isOpen);

  /**
   * Met √† jour l'√©tat d'ouverture du builder
   * @param isOpen Nouvel √©tat
   */
  updateBuilderOpen(isOpen: boolean): void {
    this._state.update(state => ({
      ...state,
      builder: {
        ...state.builder,
        isOpen
      }
    }));
  }

  /**
   * Bascule l'√©tat d'expansion d'une cat√©gorie du builder
   * @param categoryName Nom de la cat√©gorie
   */
  toggleBuilderCategory(categoryName: string): void {
    this._state.update(state => ({
      ...state,
      builder: {
        ...state.builder,
        categories: state.builder.categories.map(cat => 
          cat.name === categoryName 
            ? { ...cat, expanded: !cat.expanded }
            : cat
        )
      }
    }));
  }

  /**
   * V√©rifie si un n≈ìud peut √™tre supprim√©
   * @param nodeId L'ID du n≈ìud √† v√©rifier
   * @returns true si le n≈ìud peut √™tre supprim√©
   */
  canDeleteNode(nodeId: string): boolean {
    const node = this.nodes().find(n => n.id === nodeId);
    if (!node) return false;

    // Emp√™cher la suppression du n≈ìud Audience initial
    if (node.type === 'Audience' || node.type === 'Exit') {
      return false;
    }

    return true;
  }

  /**
   * Recalcule les positions de tous les n≈ìuds apr√®s une suppression
   * @param spacing Espacement horizontal entre les n≈ìuds (par d√©faut 250px)
   */
  recalculateAllNodesPositions(spacing: number = 250): void {
    // Obtenir les n≈ìuds actuels
    const currentNodes = this.nodes();
    
    // Si aucun n≈ìud ou un seul, rien √† r√©organiser
    if (currentNodes.length <= 1) return;
    
    // Identifier les diff√©rentes branches bas√©es sur la position Y
    // Un seuil de 50px est utilis√© pour consid√©rer des n≈ìuds comme √©tant sur la m√™me ligne
    const yThreshold = 50;
    const branches: { [key: string]: CrmNode[] } = {};
    
    // Regrouper les n≈ìuds par branches approximativement bas√©es sur Y
    currentNodes.forEach(node => {
      // Trouver une branche existante proche de la position Y du n≈ìud
      const branchKey = Object.keys(branches).find(key => {
        const branchY = parseInt(key);
        return Math.abs(node.position.y - branchY) < yThreshold;
      });
      
      if (branchKey) {
        // Ajouter √† une branche existante
        branches[branchKey].push(node);
      } else {
        // Cr√©er une nouvelle branche
        branches[node.position.y.toString()] = [node];
      }
    });
    
    // Optimiser l'espacement vertical entre branches si n√©cessaire
    const optimizedBranches = this.optimizeBranchSpacing(branches);
    
    console.log('Identified branches:', Object.keys(optimizedBranches).length);
    
    // Pour chaque branche, trier les n≈ìuds horizontalement et recalculer les positions X
    const updatedNodes: CrmNode[] = [];
    
    Object.entries(optimizedBranches).forEach(([yKey, branchNodes]) => {
      const y = parseFloat(yKey);
      
      // Trier les n≈ìuds de cette branche par position X
      const sortedBranchNodes = [...branchNodes].sort((a, b) => a.position.x - b.position.x);
      
      // Recalculer les positions X tout en maintenant Y
      sortedBranchNodes.forEach((node, index) => {
        updatedNodes.push({
          ...node,
          position: {
            x: index * spacing,
            y: y
          }
        });
      });
    });
    
    // Mettre √† jour les n≈ìuds
    this.updateNodes(updatedNodes);
    
    console.log('Node positions recalculated with spacing:', spacing);
  }
  
  /**
   * Optimise l'espacement vertical entre les branches
   * @param branches Branches √† optimiser
   * @param minSpacing Espacement vertical minimum entre les branches
   * @returns Branches avec positions Y optimis√©es
   * @private
   */
  private optimizeBranchSpacing(
    branches: { [key: string]: CrmNode[] }, 
    minSpacing: number = 100
  ): { [key: string]: CrmNode[] } {
    // Si pas assez de branches pour optimiser
    if (Object.keys(branches).length <= 1) return branches;
    
    // Obtenir un tableau des positions Y ordonn√©es
    const yPositions = Object.keys(branches).map(y => parseFloat(y)).sort((a, b) => a - b);
    
    // V√©rifier si des ajustements sont n√©cessaires
    let needsOptimization = false;
    for (let i = 1; i < yPositions.length; i++) {
      if (yPositions[i] - yPositions[i - 1] < minSpacing) {
        needsOptimization = true;
        break;
      }
    }
    
    // Si aucun ajustement n'est n√©cessaire, retourner les branches telles quelles
    if (!needsOptimization) return branches;
    
    // Cr√©er de nouvelles positions Y optimis√©es
    const optimizedBranches: { [key: string]: CrmNode[] } = {};
    
    // Assigner une nouvelle position Y √† chaque branche
    yPositions.forEach((originalY, index) => {
      const newY = index * minSpacing;
      optimizedBranches[newY.toString()] = branches[originalY.toString()];
    });
    
    console.log('Branch positions optimized with min spacing:', minSpacing);
    return optimizedBranches;
  }

  /**
   * V√©rifie et r√©pare l'int√©grit√© de l'√©tat du flow
   * - V√©rifie que tous les n≈ìuds et connexions ont des IDs
   * - V√©rifie que les connexions r√©f√©rencent des n≈ìuds valides
   * - V√©rifie que les positions des n≈ìuds sont coh√©rentes
   * @returns true si des r√©parations ont √©t√© effectu√©es
   */
  validateAndRepairState(): boolean {
    console.log('Validating and repairing flow state');
    let hasChanges = false;
    
    // 1. V√©rifier les IDs des n≈ìuds
    const nodesWithoutIds = this._state().nodes.filter(node => !node.id);
    if (nodesWithoutIds.length > 0) {
      console.warn('Found nodes without IDs:', nodesWithoutIds.length);
      this._state.update(state => ({
        ...state,
        nodes: state.nodes.map(node => {
          if (!node.id) {
            hasChanges = true;
            return { ...node, id: generateGuid() };
          }
          return node;
        })
      }));
    }
    
    // 2. V√©rifier les IDs des connexions
    const connectionsWithoutIds = this._state().connections.filter(conn => !conn.id);
    if (connectionsWithoutIds.length > 0) {
      console.warn('Found connections without IDs:', connectionsWithoutIds.length);
      this._state.update(state => ({
        ...state,
        connections: state.connections.map(conn => {
          if (!conn.id) {
            hasChanges = true;
            return { ...conn, id: generateGuid() };
          }
          return conn;
        })
      }));
    }
    
    // 3. V√©rifier que les connexions r√©f√©rencent des n≈ìuds valides
    const nodeIds = new Set(this._state().nodes.map(node => node.id));
    const invalidConnections = this._state().connections.filter(conn => {
      const sourceNodeId = conn.sourceId.replace('output_', '');
      const targetNodeId = conn.targetId.replace('input_', '');
      return !nodeIds.has(sourceNodeId) || !nodeIds.has(targetNodeId);
    });
    
    if (invalidConnections.length > 0) {
      console.warn('Found invalid connections:', invalidConnections.length);
      this._state.update(state => ({
        ...state,
        connections: state.connections.filter(conn => {
          const sourceNodeId = conn.sourceId.replace('output_', '');
          const targetNodeId = conn.targetId.replace('input_', '');
          const isValid = nodeIds.has(sourceNodeId) && nodeIds.has(targetNodeId);
          if (!isValid) hasChanges = true;
          return isValid;
        })
      }));
    }
    
    // 4. V√©rifier la coh√©rence des positions des n≈ìuds
    const nodesWithInvalidPositions = this._state().nodes.filter(
      node => !node.position || typeof node.position.x !== 'number' || typeof node.position.y !== 'number'
    );
    
    if (nodesWithInvalidPositions.length > 0) {
      console.warn('Found nodes with invalid positions:', nodesWithInvalidPositions.length);
      this._state.update(state => ({
        ...state,
        nodes: state.nodes.map(node => {
          if (!node.position || typeof node.position.x !== 'number' || typeof node.position.y !== 'number') {
            hasChanges = true;
            return { 
              ...node, 
              position: { x: 0, y: 0 } 
            };
          }
          return node;
        })
      }));
      
      // Si des positions ont √©t√© r√©par√©es, recalculer toutes les positions
      this.recalculateAllNodesPositions();
    }
    
    // 5. V√©rifier que les n≈ìuds ont des propri√©t√©s maxInputs et maxOutputs
    const nodesWithInvalidIO = this._state().nodes.filter(
      node => node.maxInputs === undefined || node.maxOutputs === undefined
    );
    
    if (nodesWithInvalidIO.length > 0) {
      console.warn('Found nodes with invalid IO properties:', nodesWithInvalidIO.length);
      this._state.update(state => ({
        ...state,
        nodes: state.nodes.map(node => {
          if (node.maxInputs === undefined || node.maxOutputs === undefined) {
            hasChanges = true;
            return { 
              ...node, 
              maxInputs: node.maxInputs ?? this.getDefaultMaxInputs(node.type),
              maxOutputs: node.maxOutputs ?? this.getDefaultMaxOutputs(node.type)
            };
          }
          return node;
        })
      }));
    }
    
    if (hasChanges) {
      console.log('State repairs completed successfully');
    } else {
      console.log('No state repairs needed');
    }
    
    return hasChanges;
  }
}